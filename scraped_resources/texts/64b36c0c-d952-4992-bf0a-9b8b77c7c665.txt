Become a member Sign in Get started Docker Flask A Simple Tutorial mtngt Follow Apr · min read This is a simple tutorial for getting started with Docker Flask There a lot of different methods I have found out there but after going through my own struggles with it I wanted to share the most concise version I could come up with I hope this helps and as always the finished productcode can be found at the bottom of the page no license always free claps are welcome on my personal Github page You will learn how to create run build push pull kill prune and work in docker with flask as an api Setup Steps Create a folder to hold the project We will operate out of here for the most part Use the mkdir command to create a folder mkdir hellodockerflask Navigate to that directory with cd cd hellodockerflask Make sure you have docker installed the version is not particularly important as these basic commands are just about the same in all versions docker v Docker version ce build Don’t have it installed Here is the link to the docker official site however you can use whatever method you like to install it Install Docker Docker is available in two editions Community Edition CE and Enterprise Edition EE Docker Community Edition CE… docsdockercom Now that docker is ready lets see if you have any running containers docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES I do not have have any running right now If you are just getting started there shouldn’t be any here Either way it won’t hurt to have another one running at the same time Have some currently running and want to kill them docker kill CONTAINER ID You can also check to see if you have any containers even if they are not running docker imagesREPOSITORY TAG IMAGE ID CREATED SIZE mtngtangulardocker latest hours ago Again these won’t hurt but a good way to check to see what you already have commands like this will come in handy later Want to clear out all the not running stuff as well docker system prune a That will delete everything you have in your local docker instance So be careful Okay now that we know the basics lets get started Creating the Files First we need a simple flask file I am going to make one that utilizes both flask and flaskrestful FlaskRESTful FlaskRESTful documentation FlaskRESTful is an extension for Flask that adds support for quickly building REST APIs It is a lightweight… flaskrestfulreadthedocsio Welcome Flask A Python Microframework Flask is a microframework for Python based on Werkzeug Jinja and good intentions And before you ask Its BSD… flaskpocooorg At this point I am going to assume you know python basics and have python installed python version Python Create a new file in your hellodockerflask folder called apppy with some basic flask code in it apppy apppy a minimal flask api using flaskrestful from flask import Flask from flaskrestful import Resource Api app Flaskname api Apiapp class HelloWorldResource def getself return hello world apiaddresourceHelloWorld if name main apprundebugTrue host You will notice the python file imports a few things Although you might have them right now locally the next person on the next machine won’t So we need to create a requirementstxt file to import them when our docker runs requirementstxt flask flaskrestful Now we need a Dockerfile in the same directory It is just called Dockerfile no extension no suffix Dockerfile Dockerfile this is a comment Delete me if you wantFROM python appWORKDIR appRUN pip install r requirementstxtENTRYPOINT pythonCMD apppy This Dockerfile copies our current folder into our container folder app It sets that folder as the working directory installs all our requirements with pip install from requirementstxt and then runs the file using python apppy Thats it these are the files you need to get started My hellodockerflask folder looks like this hellodockerflask │ └───requirementstxt │ └───Dockerfile │ └───apppy Docker Build You should still be in your hellodockerflask directory Now we can build our docker image docker build t mydockerflasklatest You will get a bunch of fancy output with loading bars but what are looking for it it to end with the following confirmation Successfully built tagged mydockerflasklatest What does this do We are building an image with the tag tag t mydockerflasklatest that includes everything in the current directory Want to know more about tags This bloke is pretty passionate about it The misunderstood Docker tag latest Docker images have a tag named latest which doesn’t work as most people expect I’ve listened to numerous speakers and… mediumcom Now we can see what we created docker images REPOSITORY TAG IMAGE ID CREATED SIZE mydockerflask latest seconds ago But is it running docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES Nope That is the next step Docker Run You can run the build you just created with the docker run command docker run d p mydockerflasklatest However this has a few pieces I think are important First thing is d which detatches from the run This means you won’t see any output You can remove the d if you would like to see the run process Next is p which specifies the port it is going to run on In out apppy file we used apprundebugTrue host’ so we needed to specify which port when using flask run which above you can see I used Okay now we can see it is running docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS mydockerflask python apppy min ago Up min I have shortened this output a bit because super long line snippets looks like awfulness on medium Feature Request View Your Flask Restful Api Now your api is running You can use a few methods to check it out Terminal open a Google Chrome http Or in your favorite browser go to http Or use curl to do a get request curl http hello world Or use Postman A super great tool for working with endpoints you are constantly referencing and testing You can save old requests and set up multiple environments Postman Postman is the only complete API development environment for API developers used by more than million developers… Push Your Image To Docker Hub Now you can push your image to docker hub so you can pull it down later and use it thats why docker is awesome Create an account over at docker hub Then from your terminal window docker login u mtngtPasswordLogin Succeeded But please use your username unless you can guess my password Now we retag the image with your username prefix username docker tag mydockerflask mtngtmydockerflask We could have named it this from the start with the username prefix but I felt it was more clear to explain that is isn’t necessary to do that until now And then you can push it to your docker hub docker push mtngtmydockerflask This might take a minute but now mydockerflask is available from your public docker hub You can set this up private after the fact if you would like Pull Your Image From Docker Hub Now lets pull down your image from docker hub But first I want to prove that this works and we don’t need all the stuff we have had previously So first kill all the current running dockers docker psCONTAINER ID IMAGE mydockerflasklatest Do it Sheev Palpatine Voice docker kill We have only stopped it Remove it from our local docker instance completely docker system prune adocker imagesREPOSITORY TAG IMAGE ID CREATED SIZE All gone Docker pull the image you pushed docker pull mtngtmydockerflask This might take some time and have a bit of output But again we are looking for Status Downloaded newer image for mtngtmydockerflasklatest You have your image back docker imagesREPOSITORY TAG IMAGE ID CREATED SIZE mtngtmydockerflask latest minutes ago Now run like before but remember we have a new name It is now prefixed with yourusername docker run d p mtngtmydockerflasklatest And it is live again docker psCONTAINER ID IMAGE mtngtmydockerflasklatest Curls for the gurls curl http hello world Final Things To Remember Now we have successfully created ran pushed and pulled with docker However sometimes you want to edit You can do this at anytime by making changes to the files and rebuilding the same way with docker build But remember when running your new changes you will need to kill the current instance with docker kill or specify a new port with docker run p not the same port that is already running This will avoid an error of the port already being in use Thanks Here is the code I promised mtngtmydockerflask Docker Flask Simple Tutorial Contribute to mtngtmydockerflask development by creating an account on GitHub githubcom More to come with Docker Angular and integrating those with the flask api with dockercompose a way to link multiple dockers Docker Python Flask API claps Written by mtngt Follow Follow See responses Discover Medium Welcome to a place where words matter On Medium smart voices and original ideas take center stage with no ads in sight Watch Make Medium yours Follow all the topics you care about and we’ll deliver the best stories for you to your homepage and inbox Explore Become a member Get unlimited access to the best stories on Medium — and support writers while you’re at it Just month Upgrade AboutHelpLegal